多态：
    同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。

    将不变的事物与可能改变的事物分离开来

-------------------------------------

封装：
    封装的目的是将信息隐藏。封装数据和封装实现

    封装数据：
    封装实现：

-------------------------------------

原型模式：
    原型模式是通过克隆来创建对象的

    原型编程的基本规则：
        a). 所有的数据都是对象
        b). 要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它
        c). 对象会记住它的原型
        d). 如果对象无法响应某个请求，它会把这个请求委托给自己的原型

    JavaScript中根原型：Object.prototype

    JavaScript中函数既可以作为普通函数被调用，也可以作为构造函数被调用。当使用new来调用函数时，此时的函数就是一个构造函数。用new创建对象的过程，实际也只是先克隆Object.prototype对象，再进行一些其他额外操作。

    JavaScript给对象提供了一个名为__proto__的隐藏属性，某个对象的__proto__属性默认会指向它的构造器的原型对象，既Contructor.prototype
        var a = new Object();
        console.log(a.__proto__ === Object.prototype);  // true

    原型链并不是无限长的，尝试访问a的address属性 -> a.address -> A.prototype -> Object.prototype(null) -> undefined

--------------------------------------------------------------------------

this的指向：
    1、作为对象的方法调用
    2、作为普通函数调用
    3、构造器调用
    4、Function.prototype.call或Function.prototype.apply调用

1、作为对象的方法调用时，this指向该对象
2、作为普通函数调用，this指向window
3、构造器调用，this指向对象本身
4、Function.prototype.call或Function.prototype.apply调用
    call和apply方法可以动态的改变传入函数的this

-------------------------------------

call和apply：
    fn.call(this指向谁, 参数1, 参数2....);
    fn.apply(this指向谁, [参数1, 参数2...]);

    fn.apply(null, []);
        this -> window
        严格模式：this -> null

bind：

--------------------------------------------------------------------------

闭包：
    闭包的形成和变量的作用域以及变量的生存周期密切相关

    命令模式：
        命令模式的意图是把请求封装为对象，从而分离请求的发起者和请求的接收者(执行者)之间的耦合关系。在命令被执行之前，可以预先往命令对象中植入命令的接收者。

-------------------------------------

高阶函数：
    高阶函数是指至少满足下列条件之一的函数
        a). 函数可以作为参数被传递
        b). 函数可以作为返回值输出

    1、回调函数(函数作为参数)
        只管定义，不管调用
    2、函数作为返回值
        a). 判断数据的类型
        b). getSingle

高阶函数应用：
1、函数柯里化(currying)
    currying又称部分求值，一个currying函数首先接受一些参数，接受了这些参数之后，该函数不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。等到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。
2、uncurrying
    当我们调用对象的某个方法时，其实不关心该对象原本是否被设计为拥有这个方法。一个对象也未必只能使用它自身的方法。
3、函数节流
    a). 函数被频繁调用
        i). window.onresize
        ii). mousemove
        iii). 上传进度
    b). 函数节流的原理
        借助setTimeout
    c). 代码实现
4、分时函数
5、惰性函数
    var addEvent = function(obj, sEv, fn){
        if(window.addEventListener){
            addEvent = function(obj, sEv, fn){
                obj.addEventListener(sEv, fn, false);
            }
        }else if(window.attachEvent){
            addEvent = function(obj, sEv, fn){
                obj.attachEvent('on'+sEv, fn);
            };
        }
        addEvent(obj, sEv, fn);
    };
--------------------------------------------------------------------------













